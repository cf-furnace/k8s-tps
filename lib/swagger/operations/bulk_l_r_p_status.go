package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/cf-furnace/k8s-tps/lib/model"
	"github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BulkLRPStatusHandlerFunc turns a function with the right signature into a bulk l r p status handler
type BulkLRPStatusHandlerFunc func(BulkLRPStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BulkLRPStatusHandlerFunc) Handle(params BulkLRPStatusParams) middleware.Responder {
	return fn(params)
}

// BulkLRPStatusHandler interface for that can handle valid bulk l r p status params
type BulkLRPStatusHandler interface {
	Handle(BulkLRPStatusParams) middleware.Responder
}

// NewBulkLRPStatus creates a new http.Handler for the bulk l r p status operation
func NewBulkLRPStatus(ctx *middleware.Context, handler BulkLRPStatusHandler) *BulkLRPStatus {
	return &BulkLRPStatus{Context: ctx, Handler: handler}
}

/*BulkLRPStatus swagger:route GET /bulk_actual_lrp_status bulkLRPStatus

BulkLRPStatus bulk l r p status API

*/
type BulkLRPStatus struct {
	Context *middleware.Context
	Handler BulkLRPStatusHandler
}

func (o *BulkLRPStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewBulkLRPStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

/*BulkLRPStatusOKBodyBody bulk l r p status o k body body

swagger:model BulkLRPStatusOKBodyBody
*/
type BulkLRPStatusOKBodyBody map[string][]model.LRPInstance

// Validate validates this bulk l r p status o k body body
func (o BulkLRPStatusOKBodyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := validate.Required("bulkLRPStatusOK", "body", o); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

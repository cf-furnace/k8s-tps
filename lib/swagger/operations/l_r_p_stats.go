package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LRPStatsHandlerFunc turns a function with the right signature into a l r p stats handler
type LRPStatsHandlerFunc func(LRPStatsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LRPStatsHandlerFunc) Handle(params LRPStatsParams) middleware.Responder {
	return fn(params)
}

// LRPStatsHandler interface for that can handle valid l r p stats params
type LRPStatsHandler interface {
	Handle(LRPStatsParams) middleware.Responder
}

// NewLRPStats creates a new http.Handler for the l r p stats operation
func NewLRPStats(ctx *middleware.Context, handler LRPStatsHandler) *LRPStats {
	return &LRPStats{Context: ctx, Handler: handler}
}

/*LRPStats swagger:route GET /actual_lrps/{guid}/stats lRPStats

LRPStats l r p stats API

*/
type LRPStats struct {
	Context *middleware.Context
	Handler LRPStatsHandler
}

func (o *LRPStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewLRPStatsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LRPStatusHandlerFunc turns a function with the right signature into a l r p status handler
type LRPStatusHandlerFunc func(LRPStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LRPStatusHandlerFunc) Handle(params LRPStatusParams) middleware.Responder {
	return fn(params)
}

// LRPStatusHandler interface for that can handle valid l r p status params
type LRPStatusHandler interface {
	Handle(LRPStatusParams) middleware.Responder
}

// NewLRPStatus creates a new http.Handler for the l r p status operation
func NewLRPStatus(ctx *middleware.Context, handler LRPStatusHandler) *LRPStatus {
	return &LRPStatus{Context: ctx, Handler: handler}
}

/*LRPStatus swagger:route GET /actual_lrps/{guid} lRPStatus

LRPStatus l r p status API

*/
type LRPStatus struct {
	Context *middleware.Context
	Handler LRPStatusHandler
}

func (o *LRPStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewLRPStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
